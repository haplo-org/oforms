
var /* seal */ FormDescription = function(specification, delegate, overrideID) {
    // TODO: Basic error checking on FormDescription arguments
    this.specification = specification;
    this.delegate = delegate;
    this.formId = overrideID || specification.formId;
    // Build form description out of Elements
    this._defaultElementName = 0;
    this._elements = {};    // name to element lookup
    this._dataSources = {}; // name to data source lookup
    this._root = new SectionElement(this.specification, this);
    // Set up the templating system when the first description is created, using built-in or delegate rendering
    if(delegate.formTemplateRendererSetup) {
        delegate.formTemplateRendererSetup();
    } else {
        _templateRendererSetup();
    }
};

_.extend(FormDescription.prototype, {
    // Properties, public to users of oForms
    //   specification - given specification
    //   delegate - delegate for this form
    //   formId - ID for the form (reflected in the HTML)

    // Requirements flags, public to users of oForms
    //   requiresBundle - whether a bundle is required
    //   requiresClientUIScripts - whether the output form needs client side scripting support
    // (These flags are set by _initElement() methods of Elements.)

    // Properties used by other objects in this system, but not by users of oForms
    //   _root - SectionElement at the root of the form

    // ----------------------------------------------------------------------------------------

    // Defaults for requirements
    requiresBundle: false,
    requiresClientUIScripts: false,

    // ----------------------------------------------------------------------------------------

    // Construct an instance of this form
    createInstance: function(document) {
        return new FormInstance(this, document);
    },

    // ----------------------------------------------------------------------------------------
    // Bundle support

    // Use the requiresBundle property to see if a bundle is required.

    // Generate the bundle, as a JSON compatible data structure. The caller should make it
    // available on the client side, and call oForms.client.registerBundle(id, bundle).
    generateBundle: function() {
        // Create an empty instance used for rendering things
        var emptyInstance = this.createInstance({});
        emptyInstance._isEmptyInstanceForBundling = true;
        // Create a blank bundle, ask the root to fill it in, return it
        var bundle = {elements:{}};
        this._root._bundleClientRequirements(emptyInstance, bundle);
        return bundle;
    },

    // ----------------------------------------------------------------------------------------
    // Functions for use by other parts of the forms system
    _generateDefaultElementName: function(specification) {
        // Generate default names using the labels, so the names don't change when forms are updated
        var proposed;
        if(specification.label) {
            proposed = specification.label.toLowerCase().replace(/[^a-z0-9]/g,'_').replace(/(^_+|_+$)/g,'');
            if(!this._elements[proposed]) {
                // Prefer not to add a numberic suffix when generating names from labels, so shortcut now
                // if there's no registered element with this name.
                return proposed;
            }
        }
        if(!proposed) {
            // If there's no label, use a generic prefix it won't clash with names generated by the path.
            proposed = '_ofe';
        }
        while(this._elements[proposed + this._defaultElementName]) {
            this._defaultElementName++;
        }
        return proposed + this._defaultElementName;
    },

    _registerElement: function(element) {
        if(this._elements[element.name]) {
            complain("spec", "Element name "+element.name+" is duplicated");
        }
        this._elements[element.name] = element;
    },

    // ----------------------------------------------------------------------------------------
    // Data source handling

    // Get the data source object, exceptioning if the source doesn't exist
    _getDataSource: function(name) {
        // Try the cache first
        var dataSource = this._dataSources[name];
        // If not there, ask delegate, checking for existence of function first
        if(!dataSource && this.delegate.formGetDataSource) {
            this._dataSources[name] = dataSource = this.delegate.formGetDataSource(name);
        }
        // Complain if it doesn't exist
        if(!dataSource) {
            complain("data-source", "Data source "+this._dataSourceName+" does not exist");
        }
        return dataSource;
    },

    // Set the requirement flags for a data source.
    // Called by Element _initElement() functions to set the flags for each give data source they use.
    _setRequirementsFlagsForDataSource: function(name) {
        // TODO: Work out if a data source doesn't actually require a bundle
        this.requiresBundle = true;
    },

    // Include information about the data source in the bundle
    _bundleDataSource: function(name, bundle) {
        if(!bundle.dataSource) { bundle.dataSource = {}; }
        if(!bundle.dataSource[name]) {
            var dataSource = this._getDataSource(name);
            var info = { name: name };
            if(dataSource.endpoint) {
                info.endpoint = dataSource.endpoint;
            }
            bundle.dataSource[name] = info;
        }
    }
});

// Public API for creating a description
oForms.createDescription = function(specification, delegate, overrideID) {
    return new FormDescription(specification, delegate, overrideID);
};
